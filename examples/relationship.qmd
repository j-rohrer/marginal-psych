# Relationship Status and the Importance of Friends

Before we start, let's execute [a helper script](https://github.com/j-rohrer/marginal-psych/blob/main/scripts/load.R) that loads the necessary dependencies.

```{r}
#| warning: false
#| message: false
source(here::here("scripts/load.R"))
```

## Overview

This document contains example 2, in which we analyze the association between relationship status and the importance people assign to friends.
Data can be retrieved from the [OSF](https://osf.io/gj6x5/files/osfstorage/63b81606c8da86094edf234b){target="_blank"} but is also included in the downloadable replication package. 

It’s a common complaint that people who enter a relationship start to neglect their friends. 
Here, we are going to use this to motivate an associational research question: Do people in romantic relationships, on average, assign less importance to their friends? 
To address this question, we analyze data that were collected in the context of a diary study on satisfaction with various aspects of life [(Rohrer et al., 2024)](https://online.ucpress.edu/collabra/article/10/1/121238/202884/The-Effects-of-Satisfaction-With-Different-Domains){target="_blank"}.
In this study, 482 people reported whether they were in a romantic relationship of any kind (partner) and also the extent to which they considered their friendships important (friendship_importance) on a scale from 1 (not important at all) to 5 (very important). 

## Read and clean the data

```{r}
# Read the data
dat <- read.csv(here("data/start.csv"))

# Restrict to range that we can model well
dat <- dat[dat$sex != 3, ] # exclude 5 people who reported a gender distinct from male/female
dat <- dat[dat$age < 60, ] # exclude people over the age of 60

# Limit to complete cases
dat <- dat[complete.cases(dat[, c("age", "sex", "partner_any", "IMP_friends_Start")]),]

dat$sex <- as.factor(dat$sex)

# Look at the variables
table(dat$age)
table(dat$sex)
table(dat$partner_any)

# Rename some variables
dat <- dat |>
  mutate(sex = factor(sex, levels = c(1, 2), labels = c("female", "male"))) |>
  rename(partner = partner_any,
         gender = sex,
         friendship_importance = IMP_friends_Start)
```
## Visualize associations with age
This code produces Figure 4: Predicted importance of friends by age in three different simple linear models that only include age as a predictor, including (1) age as a linear predictor or (2) age as a categorical predictor, or (3) age splines (B-splines with four degrees of freedom).

Respondents’ age varies from 18 to 59 years. 
How do we best include this variable in our analysis?
If we simply include it as a linear predictor, we assume that friendship_importance changes with age in a linear manner.
If, instead, we include it as a categorical predictor (treating each year of age as its own category), we do not impose any assumptions about the functional form—but for some years, we only have few observations, resulting in a trajectory that jumps around a lot, with wide confidence intervals. 

So, we may prefer a solution that lies somewhere between these two options. 
Contenders may be using coarser age categories or using polynomials. 
A third alternative is splines. 
These result in flexible, locally smooth trajectories. 
Unlike polynomials, splines enforce no global functional forms; unlike age categories, splines do not result in abrupt jumps in the trajectory. 


```{r}
# Linear association
age_lin <- lm(friendship_importance ~ age, data = dat)
# Each year of age as its own category
age_cat <- lm(friendship_importance ~ as.factor(age), data = dat)
# Smoothed with splines
age_smooth <- lm(friendship_importance ~ bs(age, df = 4), data = dat)

# Extract predictions from each of the three models
pred_lin <- avg_predictions(age_lin, by = "age")
pred_cat <- avg_predictions(age_cat, by = "age")
pred_smooth <- avg_predictions(age_smooth, by = "age")

# The following code generates a grid that expands the categorical predictions
# so that we can plot them as a step function including a step ribbon
# (This is just to get the visuals of Figure 4 right and nothing substantive)
pred_cat_expanded <- data.frame(matrix(NA, nrow = length(rep(pred_cat$estimate, each = 100)), ncol = 4))
names(pred_cat_expanded) <- c("age", "estimate", "conf.low", "conf.high")
pred_cat_expanded$age <- seq(from = min(pred_cat$age), to = (max(pred_cat$age) + 0.999999), length.out = nrow(pred_cat_expanded))
pred_cat_expanded$estimate <- rep(pred_cat$estimate, each = 100)
pred_cat_expanded$conf.low <- rep(pred_cat$conf.low, each = 100)
pred_cat_expanded$conf.high <- rep(pred_cat$conf.high, each = 100)

# Color scheme for Figure 4
col_cat <- "#E69F00"
col_lin <- "#D55E00"
col_smooth <- "#CC79A7"

# Generate the plot
ggplot() +
  # categorical
  geom_line(data = pred_cat_expanded, aes(x = age, y = estimate, group = floor(age)), color = col_cat) +
  geom_ribbon(data = pred_cat_expanded, aes(x = age, ymin = conf.low, ymax = conf.high), alpha = .2, fill = col_cat) +
  # linear
  geom_line(data = pred_lin, aes(x = age, y = estimate), color = col_lin) +
  geom_ribbon(data = pred_lin, aes(x = age, ymin = conf.low, ymax = conf.high), alpha = .2, fill = col_lin) +
  # smoothed
  geom_line(data = pred_smooth, aes(x = age, y = estimate), color = col_smooth) +
  geom_ribbon(data = pred_smooth, aes(x = age, ymin = conf.low, ymax = conf.high), alpha = .2, fill = col_smooth) +
  coord_cartesian(ylim = c(2.5, 5)) +
  xlab("Age") +
  ylab("Importance of friends (95% CI)")
# ggsave(here("plots/age.png"), width = 4, height = 3)

```



## Model fitting and interpretation with `marginaleffects`

```{r}

mod <- lm(friendship_importance ~ bs(age, df = 4) + gender + partner +
            bs(age, df = 4):gender + partner:gender + bs(age, df = 4):partner, data = dat)

# Predictions for a 20 year old single
predictions(mod, newdata = datagrid(age = 20, gender = "male", partner = 0))

# Slope of age for a 20 year old single
slopes(mod, variables = "age", newdata = datagrid(age = 20, gender = "male", partner = 0))

# Predictions for everybody in the data
predictions(mod)

# Main result: Difference in friendship importance with and without partner, holding constant age and gender
avg_comparisons(mod, variables = "partner")

# Generate separate estimates of the difference, by gender
avg_comparisons(mod, variables = "partner", by = "gender")

# Compare these gender-specific estimates
avg_comparisons(mod, variables = "partner", by = "gender", hypothesis = "b2 - b1 = 0")

# For the sake of completeness, we may also generate age-specific estimates

# Note that the wiggliness of this line will depend on how we modeled age
comp <- avg_comparisons(mod, variables = "partner", by = "age")

ggplot(comp, aes(x = age, y = estimate, ymin = conf.low, ymax = conf.high)) +
  geom_line() +
  geom_ribbon(alpha = .1) +
  geom_hline(yintercept = 0) +
  ylab("Association partner and friendship importance")
```


## Ordinal robustness check
So far, we have simply conducted linear regressions, but that may be considered suspect given the nature of the outcome: it’s just a five-point response scale ranging from not important at all to very important. 
And, in fact, barely anybody used the lower response options—more than 40% picked the highest response option. 
This results in a distribution for which the assumptions of linear regression may be considered heroic. 

So, let’s run an ordinal regression to see whether conclusions change. 
Here, we are going to fit a cumulative ordinal model with a probit link using the ordinal package [(Christensen, 2023)](https://cran.r-project.org/web/packages/ordinal/index.html){target="_blank"} using the clm() function. 
In essence, this approach assumes a continuous, normally distributed standardized latent variable (“true” friendship_importance) which is translated into the ordinal response variable following thresholds that are estimated from the data; for example, people who score -3 or less on the standardized latent variable may report that their friends are not important at all, people who score more than that but below -2.7 may pick the second lowest response option, and so on (see [Bürkner & Vuorre, 2019](https://journals.sagepub.com/doi/10.1177/2515245918823199){target="_blank"} for a proper introduction to these models). 

The rest of the model specification remains unchanged:

```{r}
# Outcome as factor variable which is what clm() expects
dat$friendship_importance_factor <- factor(dat$friendship_importance, ordered = TRUE)

# Fit the model
mod_ord <- clm(friendship_importance_factor ~ bs(age, df = 4) + gender + partner +
            bs(age, df = 4):gender + partner:gender + bs(age, df = 4):partner, 
            data = dat,
            link = "probit")

# Evaluate central comparison in terms of change in response probabilities
avg_comparisons(mod_ord, variables = "partner") 
# these results seem reasonable
```

It's hard to compare these results to the results from the linear model.
If one really wants to generate an estimate that is as comparable as possible, one can assign integer values from 1 to 5 to the response categories and thus estimate what the ordinal model implies for the average:

```{r}
# Take the response probabilities and attach the integers 1:5 to the consecutive
# response categories to arrive at the same metric as the linear model
avg_comparisons(mod_ord, variables = "partner", hypothesis = ~ I(sum(x * 1:5)))
``` 

This makes use of the hypothesis argument, which allows researchers to conduct tests on arbitrary transformations of the quantities of interest.
Here, we take each row of the standard output (the change in the probability of a given response option with partner), multiply it with the corresponding integer value (1 to 5), and sum everything up. 

While this ensures that we ask the ordinal model precisely the same answer that we asked the linear model, it may appear a bit inconsistent given that we usually use ordinal models precisely because we don’t want to assign integer values to the response categories – although note that here we do it only in the very last step, so the model itself does not assume that the distances between adjacent response categories are the same.

Much more in the spirit of the ordinal model, we can also compute the effect on the underlying continuous variable that the model assumes.

```{r}
# Evaluate effect on the underlying latent variable
avg_comparisons(mod_ord, variables = "partner", type = "linear.predictor") 

# NOTE: This currently returns the wrong sign. Bug to be fixed

``` 

## Varying the complexity of the linear model to see what happens
Let's vary model complexity to see what happens to our target quantity, the association between having a partner and friendship importance (holding constant age and gender).

### Age variations
```{r}
# No age in the model
mod_age_0 <- lm(friendship_importance ~ gender + partner +
            partner:gender, data = dat)
comp_age_0 <- avg_comparisons(mod_age_0, variables = "partner")
comp_age_0$model <- "Not included"

# Linear age in the model
mod_age_1 <- lm(friendship_importance ~ age + gender + partner +
            age:gender + partner:gender + age:partner, data = dat)
comp_age_1 <- avg_comparisons(mod_age_1, variables = "partner")
comp_age_1$model <- "Linear"

# Quadratic age on top
mod_age_2 <- lm(friendship_importance ~ poly(age, 2) + gender + partner +
            poly(age, 2):gender + partner:gender + poly(age, 2):partner, data = dat)
comp_age_2 <- avg_comparisons(mod_age_2, variables = "partner")
comp_age_2$model <- "Quadratic"

# Cubic age on top
mod_age_3 <- lm(friendship_importance ~ poly(age, 3) + gender + partner +
            poly(age, 3):gender + partner:gender + poly(age, 3):partner, data = dat)
comp_age_3 <- avg_comparisons(mod_age_3, variables = "partner")
comp_age_3$model <- "Cubic"

# Quartic age on tope
mod_age_4 <- lm(friendship_importance ~ poly(age, 4) + gender + partner +
            poly(age, 4):gender + partner:gender + poly(age, 4):partner, data = dat)
comp_age_4 <- avg_comparisons(mod_age_4, variables = "partner")
comp_age_4$model <- "Quartic"

# Quintic age on tope
mod_age_5 <- lm(friendship_importance ~ poly(age, 5) + gender + partner +
            poly(age, 5):gender + partner:gender + poly(age, 5):partner, data = dat)
comp_age_5 <- avg_comparisons(mod_age_4, variables = "partner")
comp_age_5$model <- "Quintic"


# Age with splines, df = 3
mod_age_6 <- lm(friendship_importance ~ bs(age, df = 3) + gender + partner +
                  bs(age, df = 3):gender + partner:gender + bs(age, df = 3):partner, data = dat)
comp_age_6 <- avg_comparisons(mod_age_6, variables = "partner")
comp_age_6$model <- "Splines, df = 3"


# Splines, df = 4 (same as model reported in main text)
mod_age_7 <- lm(friendship_importance ~ bs(age, df = 4) + gender + partner +
                  bs(age, df = 3):gender + partner:gender + bs(age, df = 3):partner, data = dat)
comp_age_7 <- avg_comparisons(mod_age_7, variables = "partner")
comp_age_7$model <- "Splines, df = 4"

# Splines, df = 5
mod_age_8 <- lm(friendship_importance ~ bs(age, df = 5) + gender + partner +
                  bs(age, df = 5):gender + partner:gender + bs(age, df = 5):partner, data = dat)
comp_age_8 <- avg_comparisons(mod_age_8, variables = "partner")
comp_age_8$model <- "Splines, df = 5"

# Splines, df = 6
mod_age_9 <- lm(friendship_importance ~ bs(age, df = 6) + gender + partner +
                  bs(age, df = 6):gender + partner:gender + bs(age, df = 6):partner, data = dat)
comp_age_9 <- avg_comparisons(mod_age_8, variables = "partner")
comp_age_9$model <- "Splines, df = 6"

# Put all the comparisons from the different model
# into one dataframe for plotting purposes
comp_age <- rbind(data.frame(comp_age_0), data.frame(comp_age_1), 
                  data.frame(comp_age_2), data.frame(comp_age_3),
                  data.frame(comp_age_4), data.frame(comp_age_5),
                  data.frame(comp_age_6), data.frame(comp_age_7),
                  data.frame(comp_age_8), data.frame(comp_age_9))

# Numbering (for plotting purposes)
comp_age$no <- 1:nrow(comp_age)

# Generate the plot
ggplot(comp_age, aes(x = no, y = estimate, ymin = conf.low, ymax = conf.high)) +
  geom_point() +
  geom_errorbar() +
  geom_hline(yintercept = 0) +
  coord_cartesian(ylim = c(-0.4, 0.4)) +
  scale_x_continuous(breaks = comp_age$no, labels = comp_age$model) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  xlab("Way that age is included in model") +
  ylab("Target quantity (95% CI)")
# ggsave(here("plots/age_robustness.png"), width = 4, height = 3)

```

### Interaction variations
Let's see whether the inclusion of interactions makes a difference

```{r}
# No interactions
mod_interact_1 <- lm(friendship_importance ~ bs(age, df = 4) + gender + partner, data = dat)
comp_interact_1 <- avg_comparisons(mod_interact_1, variables = "partner")
comp_interact_1$model <- "No interaction"

# Add two-way interactions (same as model reported in main text)
mod_interact_2 <- lm(friendship_importance ~ bs(age, df = 4) + gender + partner +
                       bs(age, df = 4):gender + partner:gender + bs(age, df = 4):partner, data = dat)
comp_interact_2 <- avg_comparisons(mod_interact_2, variables = "partner")
comp_interact_2$model <- "Two-way interactions"

# Add three-way interaction
mod_interact_3 <- lm(friendship_importance ~ bs(age, df = 4)*gender*partner, data = dat)
comp_interact_3 <- avg_comparisons(mod_interact_3, variables = "partner")
comp_interact_3$model <- "Three-way interaction"

# Put all the comparisons from the different model
# into one dataframe for plotting purposes
comp_interact <- rbind(data.frame(comp_interact_1), data.frame(comp_interact_2), data.frame(comp_interact_3))

# Numbering (for plotting purposes)
comp_interact$no <- 1:nrow(comp_interact)

# Plot the results
ggplot(comp_interact, aes(x = no, y = estimate, ymin = conf.low, ymax = conf.high)) +
  geom_point() +
  geom_errorbar() +
  geom_hline(yintercept = 0) +
  coord_cartesian(ylim = c(-0.4, 0.4)) +
  scale_x_continuous(breaks = comp_interact$no, labels = comp_interact$model) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  xlab("Interactions included") +
  ylab("Estimated difference in friendship importance")
```


